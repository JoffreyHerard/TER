\begin{Verbatim}[commandchars=\\\{\}]
\PYG{n}{String} \PYG{n}{from} \PYG{o}{=} \PYG{n}{message}\PYG{o}{.}\PYG{n+na}{getFrom}\PYG{o}{();}
\PYG{n}{String} \PYG{n}{body} \PYG{o}{=} \PYG{n}{message}\PYG{o}{.}\PYG{n+na}{getBody}\PYG{o}{();}
\PYG{n}{System}\PYG{o}{.}\PYG{n+na}{out}\PYG{o}{.}\PYG{n+na}{println}\PYG{o}{(}\PYG{n}{String}\PYG{o}{.}\PYG{n+na}{format}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}Received message \PYGZsq{}\PYGZpc{}1\PYGZdl{}s\PYGZsq{} from \PYGZpc{}2\PYGZdl{}s\PYGZdq{}}\PYG{o}{,} \PYG{n}{body}\PYG{o}{,} \PYG{n}{from}\PYG{o}{));}
\PYG{c+c1}{// on regarde l\PYGZsq{}en tete du message apparente a un message xml reponse tel que lid est 1 si reponse 2}
\PYG{c+c1}{//si imposible a executer dans le cas echeant un troisieme champ correspond a lid du job non reussi }
\PYG{c+c1}{//et 0 si envoie travail }

\PYG{c+c1}{// on procede donc au build un script ici un peu fictif mais pour prolonger pour voir si ca marche bien}
\PYG{c+c1}{// ici on va juste sommer les results choses assez simple}

\PYG{n}{String} \PYG{n}{regex}\PYG{o}{=}\PYG{l+s}{\PYGZdq{}[,]\PYGZdq{}}\PYG{o}{;}
\PYG{n}{String}\PYG{o}{[]} \PYG{n}{en\PYGZus{}tete} \PYG{o}{=} \PYG{n}{body}\PYG{o}{.}\PYG{n+na}{split}\PYG{o}{(}\PYG{n}{regex}\PYG{o}{);}

\PYG{c+c1}{// indice 0 = en tete indice 1 = res}
\PYG{k}{if}\PYG{o}{(}\PYG{n}{Integer}\PYG{o}{.}\PYG{n+na}{parseInt}\PYG{o}{(}\PYG{n}{en\PYGZus{}tete}\PYG{o}{[}\PYG{l+m+mi}{0}\PYG{o}{])==}\PYG{l+m+mi}{1}\PYG{o}{)\PYGZob{}}
\PYG{n}{retour\PYGZus{}Providing}\PYG{o}{+=}\PYG{n}{Integer}\PYG{o}{.}\PYG{n+na}{parseInt}\PYG{o}{(}\PYG{n}{en\PYGZus{}tete}\PYG{o}{[}\PYG{l+m+mi}{1}\PYG{o}{]);}
\PYG{n}{recu}\PYG{o}{++;}
\PYG{k}{if}\PYG{o}{(}\PYG{n}{recu}\PYG{o}{==}\PYG{n}{envoyer}\PYG{o}{)}
\PYG{o}{\PYGZob{}}
	\PYG{n}{travail\PYGZus{}terminer}\PYG{o}{=}\PYG{k+kc}{true}\PYG{o}{;}
\PYG{o}{\PYGZcb{}}
\end{Verbatim}
