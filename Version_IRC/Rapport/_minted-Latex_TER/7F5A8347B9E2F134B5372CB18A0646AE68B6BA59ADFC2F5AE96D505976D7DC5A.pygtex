\begin{Verbatim}[commandchars=\\\{\}]
\PYG{k+kn}{import} \PYG{n+nn}{org.jivesoftware.smack.*}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{org.jivesoftware.smack.Chat}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{org.jivesoftware.smack.ChatManager}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{org.jivesoftware.smack.ConnectionConfiguration}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{org.jivesoftware.smack.MessageListener}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{org.jivesoftware.smack.Roster}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{org.jivesoftware.smack.SmackConfiguration}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{org.jivesoftware.smack.XMPPConnection}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{org.jivesoftware.smack.XMPPException}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{org.jivesoftware.smack.ConnectionConfiguration.SecurityMode}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{org.jivesoftware.smack.packet.Message}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{org.jivesoftware.smack.packet.Presence}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{org.jivesoftware.smack.packet.Presence.Type}\PYG{o}{;}

\PYG{k+kn}{import} \PYG{n+nn}{java.io.*}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{java.io.BufferedWriter}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{java.io.File}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{java.io.FileInputStream}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{java.io.FileOutputStream}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{java.io.IOException}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{java.io.PrintWriter}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{java.nio.charset.Charset}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{java.nio.file.Files}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{java.nio.file.Path}\PYG{o}{;}

\PYG{k+kn}{import} \PYG{n+nn}{javax.xml.parsers.DocumentBuilder}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{javax.xml.parsers.DocumentBuilderFactory}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{javax.xml.parsers.ParserConfigurationException}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{javax.xml.transform.Transformer}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{javax.xml.transform.TransformerFactory}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{javax.xml.transform.dom.DOMSource}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{javax.xml.transform.stream.StreamResult}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{javax.xml.xpath.XPath}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{javax.xml.xpath.XPathConstants}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{javax.xml.xpath.XPathExpressionException}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{javax.xml.xpath.XPathFactory}\PYG{o}{;}

\PYG{k+kn}{import} \PYG{n+nn}{org.w3c.dom.Document}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{org.w3c.dom.Element}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{org.w3c.dom.NodeList}\PYG{o}{;}
\PYG{k+kn}{import} \PYG{n+nn}{org.xml.sax.SAXException}\PYG{o}{;}

\PYG{n+nd}{@SuppressWarnings}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}unused\PYGZdq{}}\PYG{o}{)}
\PYG{k+kd}{public} \PYG{k+kd}{class} \PYG{n+nc}{XmppManager} \PYG{o}{\PYGZob{}}
    
    \PYG{k+kd}{private} \PYG{k+kd}{static} \PYG{k+kd}{final} \PYG{k+kt}{int} \PYG{n}{packetReplyTimeout} \PYG{o}{=} \PYG{l+m+mi}{500}\PYG{o}{;} \PYG{c+c1}{// millis}
    
    \PYG{k+kd}{private} \PYG{n}{String} \PYG{n}{server}\PYG{o}{;}
    \PYG{k+kd}{private} \PYG{k+kt}{int} \PYG{n}{port}\PYG{o}{;}
    
    \PYG{k+kd}{private} \PYG{n}{ConnectionConfiguration} \PYG{n}{config}\PYG{o}{;}
    \PYG{k+kd}{private} \PYG{n}{XMPPConnection} \PYG{n}{connection}\PYG{o}{;}
    \PYG{k+kd}{static} \PYG{n}{String} \PYG{n}{NOM\PYGZus{}HOTE}\PYG{o}{=}\PYG{l+s}{\PYGZdq{}apocalypzer\PYGZhy{}lg\PYGZhy{}gram\PYGZdq{}}\PYG{o}{;}
    \PYG{k+kd}{private} \PYG{n}{ChatManager} \PYG{n}{chatManager}\PYG{o}{;}
    \PYG{k+kd}{private} \PYG{n}{MessageListener} \PYG{n}{messageListener}\PYG{o}{;}
    \PYG{k+kd}{private} \PYG{k+kt}{boolean} \PYG{n}{provider}\PYG{o}{;}
    \PYG{k+kd}{private} \PYG{k+kt}{boolean} \PYG{n}{travail\PYGZus{}terminer}\PYG{o}{=}\PYG{k+kc}{false}\PYG{o}{;}
    \PYG{k+kd}{private} \PYG{k+kt}{int} \PYG{n}{retour\PYGZus{}Providing} \PYG{o}{=}\PYG{l+m+mi}{0}\PYG{o}{;}
    \PYG{k+kd}{private} \PYG{k+kt}{int} \PYG{n}{envoyer} \PYG{o}{=}\PYG{l+m+mi}{0}\PYG{o}{;}
    \PYG{k+kd}{private} \PYG{k+kt}{int} \PYG{n}{recu} \PYG{o}{=}\PYG{l+m+mi}{0}\PYG{o}{;}
    
    \PYG{k+kd}{public} \PYG{n+nf}{XmppManager}\PYG{o}{(}\PYG{n}{String} \PYG{n}{server}\PYG{o}{,} \PYG{k+kt}{int} \PYG{n}{port}\PYG{o}{)} \PYG{o}{\PYGZob{}}
        \PYG{k}{this}\PYG{o}{.}\PYG{n+na}{server} \PYG{o}{=} \PYG{n}{server}\PYG{o}{;}
        \PYG{k}{this}\PYG{o}{.}\PYG{n+na}{port} \PYG{o}{=} \PYG{n}{port}\PYG{o}{;}
        \PYG{k}{this}\PYG{o}{.}\PYG{n+na}{provider}\PYG{o}{=}\PYG{k+kc}{true}\PYG{o}{;}
    \PYG{o}{\PYGZcb{}}
    
    \PYG{k+kd}{public} \PYG{k+kt}{boolean} \PYG{n+nf}{isProvider}\PYG{o}{()} \PYG{o}{\PYGZob{}}
		\PYG{k}{return} \PYG{n}{provider}\PYG{o}{;}
	\PYG{o}{\PYGZcb{}}

	\PYG{k+kd}{public} \PYG{k+kt}{void} \PYG{n+nf}{setProvider}\PYG{o}{(}\PYG{k+kt}{boolean} \PYG{n}{provider}\PYG{o}{)} \PYG{o}{\PYGZob{}}
		\PYG{k}{this}\PYG{o}{.}\PYG{n+na}{provider} \PYG{o}{=} \PYG{n}{provider}\PYG{o}{;}
	\PYG{o}{\PYGZcb{}}

	\PYG{k+kd}{public} \PYG{k+kt}{void} \PYG{n+nf}{init}\PYG{o}{()} \PYG{k+kd}{throws} \PYG{n}{XMPPException} \PYG{o}{\PYGZob{}}
        
        \PYG{n}{System}\PYG{o}{.}\PYG{n+na}{out}\PYG{o}{.}\PYG{n+na}{println}\PYG{o}{(}\PYG{n}{String}\PYG{o}{.}\PYG{n+na}{format}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}Initializing connection to server \PYGZpc{}1\PYGZdl{}s port \PYGZpc{}2\PYGZdl{}d\PYGZdq{}}\PYG{o}{,} \PYG{n}{server}\PYG{o}{,} \PYG{n}{port}\PYG{o}{));}

        \PYG{n}{SmackConfiguration}\PYG{o}{.}\PYG{n+na}{setPacketReplyTimeout}\PYG{o}{(}\PYG{n}{packetReplyTimeout}\PYG{o}{);}
        
        \PYG{n}{config} \PYG{o}{=} \PYG{k}{new} \PYG{n}{ConnectionConfiguration}\PYG{o}{(}\PYG{n}{server}\PYG{o}{,} \PYG{n}{port}\PYG{o}{);}
        \PYG{n}{config}\PYG{o}{.}\PYG{n+na}{setSASLAuthenticationEnabled}\PYG{o}{(}\PYG{k+kc}{false}\PYG{o}{);}
        \PYG{n}{config}\PYG{o}{.}\PYG{n+na}{setSecurityMode}\PYG{o}{(}\PYG{n}{SecurityMode}\PYG{o}{.}\PYG{n+na}{disabled}\PYG{o}{);}
        
        \PYG{n}{connection} \PYG{o}{=} \PYG{k}{new} \PYG{n}{XMPPConnection}\PYG{o}{(}\PYG{n}{config}\PYG{o}{);}
        \PYG{n}{connection}\PYG{o}{.}\PYG{n+na}{connect}\PYG{o}{();}
        
        \PYG{n}{System}\PYG{o}{.}\PYG{n+na}{out}\PYG{o}{.}\PYG{n+na}{println}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}Connected: \PYGZdq{}} \PYG{o}{+} \PYG{n}{connection}\PYG{o}{.}\PYG{n+na}{isConnected}\PYG{o}{());}
        
        \PYG{n}{chatManager} \PYG{o}{=} \PYG{n}{connection}\PYG{o}{.}\PYG{n+na}{getChatManager}\PYG{o}{();}
        \PYG{n}{messageListener} \PYG{o}{=} \PYG{k}{new} \PYG{n}{MyMessageListener}\PYG{o}{();}
        
    \PYG{o}{\PYGZcb{}}
    
    \PYG{k+kd}{public} \PYG{n}{XMPPConnection} \PYG{n+nf}{getConnection}\PYG{o}{()} \PYG{o}{\PYGZob{}}
		\PYG{k}{return} \PYG{n}{connection}\PYG{o}{;}
	\PYG{o}{\PYGZcb{}}

	\PYG{k+kd}{public} \PYG{k+kt}{void} \PYG{n+nf}{setConnection}\PYG{o}{(}\PYG{n}{XMPPConnection} \PYG{n}{connection}\PYG{o}{)} \PYG{o}{\PYGZob{}}
		\PYG{k}{this}\PYG{o}{.}\PYG{n+na}{connection} \PYG{o}{=} \PYG{n}{connection}\PYG{o}{;}
	\PYG{o}{\PYGZcb{}}

	\PYG{k+kd}{public} \PYG{k+kt}{boolean} \PYG{n+nf}{performLogin}\PYG{o}{(}\PYG{n}{String} \PYG{n}{username}\PYG{o}{,} \PYG{n}{String} \PYG{n}{password}\PYG{o}{)} \PYG{k+kd}{throws} \PYG{n}{XMPPException} \PYG{o}{\PYGZob{}}
        \PYG{k}{if} \PYG{o}{(}\PYG{n}{connection}\PYG{o}{!=}\PYG{k+kc}{null} \PYG{o}{\PYGZam{}\PYGZam{}} \PYG{n}{connection}\PYG{o}{.}\PYG{n+na}{isConnected}\PYG{o}{())} \PYG{o}{\PYGZob{}}
            \PYG{n}{connection}\PYG{o}{.}\PYG{n+na}{login}\PYG{o}{(}\PYG{n}{username}\PYG{o}{,} \PYG{n}{password}\PYG{o}{);}
        \PYG{o}{\PYGZcb{}}
        \PYG{k}{return} \PYG{k+kc}{true}\PYG{o}{;}
    \PYG{o}{\PYGZcb{}}

    \PYG{k+kd}{public} \PYG{k+kt}{void} \PYG{n+nf}{setStatus}\PYG{o}{(}\PYG{k+kt}{boolean} \PYG{n}{available}\PYG{o}{,} \PYG{n}{String} \PYG{n}{status}\PYG{o}{)} \PYG{o}{\PYGZob{}}
        
        \PYG{n}{Presence}\PYG{o}{.}\PYG{n+na}{Type} \PYG{n}{type} \PYG{o}{=} \PYG{n}{available}\PYG{o}{?} \PYG{n}{Type}\PYG{o}{.}\PYG{n+na}{available}\PYG{o}{:} \PYG{n}{Type}\PYG{o}{.}\PYG{n+na}{unavailable}\PYG{o}{;}
        \PYG{n}{Presence} \PYG{n}{presence} \PYG{o}{=} \PYG{k}{new} \PYG{n}{Presence}\PYG{o}{(}\PYG{n}{type}\PYG{o}{);}
        
        \PYG{n}{presence}\PYG{o}{.}\PYG{n+na}{setStatus}\PYG{o}{(}\PYG{n}{status}\PYG{o}{);}
        \PYG{n}{connection}\PYG{o}{.}\PYG{n+na}{sendPacket}\PYG{o}{(}\PYG{n}{presence}\PYG{o}{);}
        
    \PYG{o}{\PYGZcb{}}
    
    \PYG{k+kd}{public} \PYG{k+kt}{void} \PYG{n+nf}{destroy}\PYG{o}{()} \PYG{o}{\PYGZob{}}
        \PYG{k}{if} \PYG{o}{(}\PYG{n}{connection}\PYG{o}{!=}\PYG{k+kc}{null} \PYG{o}{\PYGZam{}\PYGZam{}} \PYG{n}{connection}\PYG{o}{.}\PYG{n+na}{isConnected}\PYG{o}{())} \PYG{o}{\PYGZob{}}
            \PYG{n}{connection}\PYG{o}{.}\PYG{n+na}{disconnect}\PYG{o}{();}
        \PYG{o}{\PYGZcb{}}
    \PYG{o}{\PYGZcb{}}
    
    \PYG{k+kd}{public} \PYG{k+kt}{void} \PYG{n+nf}{sendMessage}\PYG{o}{(}\PYG{n}{String} \PYG{n}{message}\PYG{o}{,} \PYG{n}{String} \PYG{n}{buddyJID}\PYG{o}{)} \PYG{k+kd}{throws} \PYG{n}{XMPPException} \PYG{o}{\PYGZob{}}
        \PYG{n}{System}\PYG{o}{.}\PYG{n+na}{out}\PYG{o}{.}\PYG{n+na}{println}\PYG{o}{(}\PYG{n}{String}\PYG{o}{.}\PYG{n+na}{format}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}Sending mesage \PYGZsq{}\PYGZpc{}1\PYGZdl{}s\PYGZsq{} to user \PYGZpc{}2\PYGZdl{}s\PYGZdq{}}\PYG{o}{,} \PYG{n}{message}\PYG{o}{,} \PYG{n}{buddyJID}\PYG{o}{));}
        \PYG{n}{Chat} \PYG{n}{chat} \PYG{o}{=} \PYG{n}{chatManager}\PYG{o}{.}\PYG{n+na}{createChat}\PYG{o}{(}\PYG{n}{buddyJID}\PYG{o}{,} \PYG{n}{messageListener}\PYG{o}{);}
        \PYG{n}{chat}\PYG{o}{.}\PYG{n+na}{sendMessage}\PYG{o}{(}\PYG{n}{message}\PYG{o}{);}
    \PYG{o}{\PYGZcb{}}
    
    \PYG{k+kd}{public} \PYG{k+kt}{void} \PYG{n+nf}{createEntry}\PYG{o}{(}\PYG{n}{String} \PYG{n}{user}\PYG{o}{,} \PYG{n}{String} \PYG{n}{name}\PYG{o}{)} \PYG{k+kd}{throws} \PYG{n}{Exception} \PYG{o}{\PYGZob{}}
        \PYG{n}{System}\PYG{o}{.}\PYG{n+na}{out}\PYG{o}{.}\PYG{n+na}{println}\PYG{o}{(}\PYG{n}{String}\PYG{o}{.}\PYG{n+na}{format}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}Creating entry for buddy \PYGZsq{}\PYGZpc{}1\PYGZdl{}s\PYGZsq{} with name \PYGZpc{}2\PYGZdl{}s\PYGZdq{}}\PYG{o}{,} \PYG{n}{user}\PYG{o}{,} \PYG{n}{name}\PYG{o}{));}
        \PYG{n}{Roster} \PYG{n}{roster} \PYG{o}{=} \PYG{n}{connection}\PYG{o}{.}\PYG{n+na}{getRoster}\PYG{o}{();}
        \PYG{n}{roster}\PYG{o}{.}\PYG{n+na}{createEntry}\PYG{o}{(}\PYG{n}{user}\PYG{o}{,} \PYG{n}{name}\PYG{o}{,} \PYG{k+kc}{null}\PYG{o}{);}
    \PYG{o}{\PYGZcb{}}
    
    \PYG{k+kd}{class} \PYG{n+nc}{MyMessageListener} \PYG{k+kd}{implements} \PYG{n}{MessageListener} \PYG{o}{\PYGZob{}}

        \PYG{n+nd}{@Override}
        \PYG{k+kd}{public} \PYG{k+kt}{void} \PYG{n+nf}{processMessage}\PYG{o}{(}\PYG{n}{Chat} \PYG{n}{chat}\PYG{o}{,} \PYG{n}{Message} \PYG{n}{message}\PYG{o}{)} \PYG{o}{\PYGZob{}}
        	
        	\PYG{k}{if}\PYG{o}{(}\PYG{n}{provider}\PYG{o}{)\PYGZob{}} 
	        	\PYG{c+c1}{//Modification de reaction si provider ou non }
	            \PYG{n}{String} \PYG{n}{from} \PYG{o}{=} \PYG{n}{message}\PYG{o}{.}\PYG{n+na}{getFrom}\PYG{o}{();}
	            \PYG{n}{String} \PYG{n}{body} \PYG{o}{=} \PYG{n}{message}\PYG{o}{.}\PYG{n+na}{getBody}\PYG{o}{();}
	            \PYG{n}{System}\PYG{o}{.}\PYG{n+na}{out}\PYG{o}{.}\PYG{n+na}{println}\PYG{o}{(}\PYG{n}{String}\PYG{o}{.}\PYG{n+na}{format}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}Received message \PYGZsq{}\PYGZpc{}1\PYGZdl{}s\PYGZsq{} from \PYGZpc{}2\PYGZdl{}s\PYGZdq{}}\PYG{o}{,} \PYG{n}{body}\PYG{o}{,} \PYG{n}{from}\PYG{o}{));}
	            \PYG{c+c1}{// on regarde l\PYGZsq{}en tete du message apparente a un message xml reponse tel que lid est 1 si reponse 2}
	            \PYG{c+c1}{//si imposible a executer dans le cas echeant un troisieme champ correspond a lid du job non reussi }
	            \PYG{c+c1}{//et 0 si envoie travail }
	            
	            \PYG{c+c1}{// on procede donc au build un script ici un peu fictif mais pour prolonger pour voir si ca marche bien}
	            \PYG{c+c1}{// ici on va juste sommer les results choses assez simple}
	            
	            \PYG{n}{String} \PYG{n}{regex}\PYG{o}{=}\PYG{l+s}{\PYGZdq{}[,]\PYGZdq{}}\PYG{o}{;}
	            \PYG{n}{String}\PYG{o}{[]} \PYG{n}{en\PYGZus{}tete} \PYG{o}{=} \PYG{n}{body}\PYG{o}{.}\PYG{n+na}{split}\PYG{o}{(}\PYG{n}{regex}\PYG{o}{);}
	            
	            \PYG{c+c1}{// indice 0 = en tete indice 1 = res}
	            \PYG{k}{if}\PYG{o}{(}\PYG{n}{Integer}\PYG{o}{.}\PYG{n+na}{parseInt}\PYG{o}{(}\PYG{n}{en\PYGZus{}tete}\PYG{o}{[}\PYG{l+m+mi}{0}\PYG{o}{])==}\PYG{l+m+mi}{1}\PYG{o}{)\PYGZob{}}
	            	\PYG{n}{retour\PYGZus{}Providing}\PYG{o}{+=}\PYG{n}{Integer}\PYG{o}{.}\PYG{n+na}{parseInt}\PYG{o}{(}\PYG{n}{en\PYGZus{}tete}\PYG{o}{[}\PYG{l+m+mi}{1}\PYG{o}{]);}
	            	\PYG{n}{recu}\PYG{o}{++;}
	            	\PYG{k}{if}\PYG{o}{(}\PYG{n}{recu}\PYG{o}{==}\PYG{n}{envoyer}\PYG{o}{)}
	            	\PYG{o}{\PYGZob{}}
	            		\PYG{n}{travail\PYGZus{}terminer}\PYG{o}{=}\PYG{k+kc}{true}\PYG{o}{;}
	            	\PYG{o}{\PYGZcb{}}
	            \PYG{o}{\PYGZcb{}}	
	            \PYG{k}{else}
	            \PYG{o}{\PYGZob{}}
	            	\PYG{n}{System}\PYG{o}{.}\PYG{n+na}{out}\PYG{o}{.}\PYG{n+na}{println}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}Lexecution n\PYGZsq{}as pas ete posible on redistribue aleatoirement la tache\PYGZdq{}}\PYG{o}{);}
	            \PYG{o}{\PYGZcb{}}
        	\PYG{o}{\PYGZcb{}}
        	\PYG{k}{else}
        	\PYG{o}{\PYGZob{}}
        		
        	   \PYG{n}{String} \PYG{n}{from} \PYG{o}{=} \PYG{n}{message}\PYG{o}{.}\PYG{n+na}{getFrom}\PYG{o}{();}
 	           \PYG{n}{String} \PYG{n}{body} \PYG{o}{=} \PYG{n}{message}\PYG{o}{.}\PYG{n+na}{getBody}\PYG{o}{();}
 	           \PYG{n}{System}\PYG{o}{.}\PYG{n+na}{out}\PYG{o}{.}\PYG{n+na}{println}\PYG{o}{(}\PYG{n}{String}\PYG{o}{.}\PYG{n+na}{format}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}Received message \PYGZsq{}\PYGZpc{}1\PYGZdl{}s\PYGZsq{} from \PYGZpc{}2\PYGZdl{}s\PYGZdq{}}\PYG{o}{,} \PYG{n}{body}\PYG{o}{,} \PYG{n}{from}\PYG{o}{));}
 	           \PYG{n}{System}\PYG{o}{.}\PYG{n+na}{out}\PYG{o}{.}\PYG{n+na}{println}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}c\PYGZsq{}est partie on va executer ce qu\PYGZsq{}il faut\PYGZdq{}}\PYG{o}{);}
 	           \PYG{c+c1}{// creation de l\PYGZsq{}architecture necessaire }
 	           \PYG{n}{File} \PYG{n}{dir} \PYG{o}{=} \PYG{k}{new} \PYG{n}{File} \PYG{o}{(}\PYG{l+s}{\PYGZdq{}JOB\PYGZus{}REC/DATA\PYGZus{}EXTRACT\PYGZdq{}}\PYG{o}{);}
 	           \PYG{n}{dir}\PYG{o}{.}\PYG{n+na}{mkdirs}\PYG{o}{();}
 	           \PYG{k}{try}\PYG{o}{\PYGZob{}}
 	        	   
					\PYG{n}{System}\PYG{o}{.}\PYG{n+na}{out}\PYG{o}{.}\PYG{n+na}{println}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}Ecriture du XML dans un fichier xml receive\PYGZdq{}}\PYG{o}{);}
					\PYG{n}{File} \PYG{n}{file} \PYG{o}{=} \PYG{k}{new} \PYG{n}{File}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}JOB\PYGZus{}REC/xml\PYGZus{}receive.xml\PYGZdq{}}\PYG{o}{);}
					\PYG{n}{file}\PYG{o}{.}\PYG{n+na}{createNewFile}\PYG{o}{();}
					
				
				    
					\PYG{n}{PrintWriter} \PYG{n}{writer} \PYG{o}{=} \PYG{k}{new} \PYG{n}{PrintWriter}\PYG{o}{(}\PYG{n}{file}\PYG{o}{);}
					\PYG{n}{writer}\PYG{o}{.}\PYG{n+na}{write}\PYG{o}{(}\PYG{n}{body}\PYG{o}{);}
					\PYG{n}{writer}\PYG{o}{.}\PYG{n+na}{close}\PYG{o}{();}
					
					\PYG{c+c1}{//On a maintenant cerer le fichier on va le parser pour recuperer \PYGZsh{} fichier precis}
					\PYG{n}{DocumentBuilderFactory} \PYG{n}{factory} \PYG{o}{=} \PYG{n}{DocumentBuilderFactory}\PYG{o}{.}\PYG{n+na}{newInstance}\PYG{o}{();}
					\PYG{n}{DocumentBuilder} \PYG{n}{builder} \PYG{o}{=} \PYG{n}{factory}\PYG{o}{.}\PYG{n+na}{newDocumentBuilder}\PYG{o}{();}
					\PYG{n}{Document} \PYG{n}{xml} \PYG{o}{=} \PYG{n}{builder}\PYG{o}{.}\PYG{n+na}{parse}\PYG{o}{(}\PYG{n}{file}\PYG{o}{);}
			        \PYG{n}{Element} \PYG{n}{root} \PYG{o}{=} \PYG{n}{xml}\PYG{o}{.}\PYG{n+na}{getDocumentElement}\PYG{o}{();}
			        \PYG{n}{XPathFactory} \PYG{n}{xpf} \PYG{o}{=} \PYG{n}{XPathFactory}\PYG{o}{.}\PYG{n+na}{newInstance}\PYG{o}{();}
			        \PYG{n}{XPath} \PYG{n}{path} \PYG{o}{=} \PYG{n}{xpf}\PYG{o}{.}\PYG{n+na}{newXPath}\PYG{o}{();}
			        \PYG{n}{String} \PYG{n}{expression} \PYG{o}{=} \PYG{l+s}{\PYGZdq{}/JOB/exec\PYGZdq{}}\PYG{o}{;}
			        \PYG{n}{String} \PYG{n}{strexec} \PYG{o}{=} \PYG{o}{(}\PYG{n}{String}\PYG{o}{)}\PYG{n}{path}\PYG{o}{.}\PYG{n+na}{evaluate}\PYG{o}{(}\PYG{n}{expression}\PYG{o}{,} \PYG{n}{root}\PYG{o}{);}
			        
			        
			        \PYG{n}{expression} \PYG{o}{=} \PYG{l+s}{\PYGZdq{}/JOB/contraintes\PYGZdq{}}\PYG{o}{;}

			        \PYG{n}{String} \PYG{n}{strperl} \PYG{o}{=} \PYG{o}{(}\PYG{n}{String}\PYG{o}{)}\PYG{n}{path}\PYG{o}{.}\PYG{n+na}{evaluate}\PYG{o}{(}\PYG{n}{expression}\PYG{o}{,} \PYG{n}{root}\PYG{o}{);}
		            
		            \PYG{c+cm}{/* On récupère tous les noeuds répondant au chemin //patient */}

					
					\PYG{c+c1}{// On ajouter a sa la bonne ligne de commande a executer}
			        \PYG{n}{expression} \PYG{o}{=} \PYG{l+s}{\PYGZdq{}/JOB/cmd\PYGZdq{}}\PYG{o}{;}
			        \PYG{n}{String} \PYG{n}{strcmd} \PYG{o}{=} \PYG{o}{(}\PYG{n}{String}\PYG{o}{)}\PYG{n}{path}\PYG{o}{.}\PYG{n+na}{evaluate}\PYG{o}{(}\PYG{n}{expression}\PYG{o}{,} \PYG{n}{root}\PYG{o}{);}    
			        \PYG{c+c1}{//Creation du fichier de contrainte en PERL}
			        
					\PYG{n}{System}\PYG{o}{.}\PYG{n+na}{out}\PYG{o}{.}\PYG{n+na}{println}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}Ecriture du XML dans un fichier contrainte\PYGZdq{}}\PYG{o}{);}
					\PYG{n}{File} \PYG{n}{file\PYGZus{}con} \PYG{o}{=} \PYG{k}{new} \PYG{n}{File}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}JOB\PYGZus{}REC/DATA\PYGZus{}EXTRACT/contraintes.pl\PYGZdq{}}\PYG{o}{);}
					\PYG{n}{file}\PYG{o}{.}\PYG{n+na}{createNewFile}\PYG{o}{();}
					\PYG{n}{writer} \PYG{o}{=} \PYG{k}{new} \PYG{n}{PrintWriter}\PYG{o}{(}\PYG{n}{file\PYGZus{}con}\PYG{o}{);}
					\PYG{n}{writer}\PYG{o}{.}\PYG{n+na}{write}\PYG{o}{(}\PYG{n}{strperl}\PYG{o}{);}
					\PYG{n}{writer}\PYG{o}{.}\PYG{n+na}{close}\PYG{o}{();}
					
					\PYG{c+c1}{//Creation du fichier de exec en PERL et son execution}
					
					\PYG{n}{System}\PYG{o}{.}\PYG{n+na}{out}\PYG{o}{.}\PYG{n+na}{println}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}Ecriture du XML dans un fichier calcul.pl\PYGZdq{}}\PYG{o}{);}
					\PYG{n}{File} \PYG{n}{file\PYGZus{}exec} \PYG{o}{=} \PYG{k}{new} \PYG{n}{File}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}JOB\PYGZus{}REC/DATA\PYGZus{}EXTRACT/calcul.pl\PYGZdq{}}\PYG{o}{);}
					\PYG{n}{file}\PYG{o}{.}\PYG{n+na}{createNewFile}\PYG{o}{();}
					\PYG{n}{writer} \PYG{o}{=} \PYG{k}{new} \PYG{n}{PrintWriter}\PYG{o}{(}\PYG{n}{file\PYGZus{}exec}\PYG{o}{);}
					\PYG{n}{writer}\PYG{o}{.}\PYG{n+na}{write}\PYG{o}{(}\PYG{n}{strexec}\PYG{o}{);}
					\PYG{n}{writer}\PYG{o}{.}\PYG{n+na}{close}\PYG{o}{();}
					\PYG{c+c1}{// execution}
					\PYG{n}{Runtime} \PYG{n}{runtime} \PYG{o}{=} \PYG{n}{Runtime}\PYG{o}{.}\PYG{n+na}{getRuntime}\PYG{o}{();}
					\PYG{n}{System}\PYG{o}{.}\PYG{n+na}{out}\PYG{o}{.}\PYG{n+na}{println}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}execution du fichier de contrainte \PYGZdq{}}\PYG{o}{);}
					\PYG{c+c1}{// on execute le fichier de contrainte 3 = GOOD different = NOGOOD}
					
					\PYG{n}{Process} \PYG{n}{p\PYGZus{}cunt} \PYG{o}{=}\PYG{n}{runtime}\PYG{o}{.}\PYG{n+na}{exec}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}perl JOB\PYGZus{}REC/DATA\PYGZus{}EXTRACT/contraintes.pl\PYGZdq{}}\PYG{o}{);}
					\PYG{k+kt}{int} \PYG{n}{resultat\PYGZus{}con}\PYG{o}{=}\PYG{n}{p\PYGZus{}cunt}\PYG{o}{.}\PYG{n+na}{waitFor}\PYG{o}{();}
					\PYG{n}{System}\PYG{o}{.}\PYG{n+na}{out}\PYG{o}{.}\PYG{n+na}{println}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}execution termine du fichier de contrainte \PYGZdq{}}\PYG{o}{);}
					
					\PYG{n}{System}\PYG{o}{.}\PYG{n+na}{out}\PYG{o}{.}\PYG{n+na}{println}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}On a recupere la valeur de sortie de contraintes\PYGZdq{}}\PYG{o}{);}
					\PYG{n}{System}\PYG{o}{.}\PYG{n+na}{out}\PYG{o}{.}\PYG{n+na}{println}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}Resultat contraintes = \PYGZdq{}}\PYG{o}{+}\PYG{n}{resultat\PYGZus{}con}\PYG{o}{);}
					
					\PYG{k}{if}\PYG{o}{(}\PYG{n}{resultat\PYGZus{}con}\PYG{o}{==}\PYG{l+m+mi}{3}\PYG{o}{)\PYGZob{}}
						\PYG{c+c1}{//execution}
						\PYG{n}{System}\PYG{o}{.}\PYG{n+na}{out}\PYG{o}{.}\PYG{n+na}{println}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}La contrainte a valider,on va commencer lexecution\PYGZdq{}}\PYG{o}{);}
						
						\PYG{n}{Process} \PYG{n}{p\PYGZus{}cmd} \PYG{o}{=}\PYG{n}{runtime}\PYG{o}{.}\PYG{n+na}{exec}\PYG{o}{(}\PYG{n}{strcmd}\PYG{o}{);}
						\PYG{k+kt}{int} \PYG{n}{resultat}\PYG{o}{=}\PYG{n}{p\PYGZus{}cmd}\PYG{o}{.}\PYG{n+na}{waitFor}\PYG{o}{();}
						\PYG{n}{System}\PYG{o}{.}\PYG{n+na}{out}\PYG{o}{.}\PYG{n+na}{println}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}Resultats du calcul = \PYGZdq{}}\PYG{o}{+}\PYG{n}{resultat}\PYG{o}{);}
						\PYG{c+c1}{// on n\PYGZsq{}as plus que a renvoyer le resultats}
						
						\PYG{n}{getCurrent}\PYG{o}{().}\PYG{n+na}{sendMessage}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}1,\PYGZdq{}}\PYG{o}{+}\PYG{n}{resultat}\PYG{o}{,} \PYG{l+s}{\PYGZdq{}provider@\PYGZdq{}}\PYG{o}{+}\PYG{n}{NOM\PYGZus{}HOTE}\PYG{o}{);}
						\PYG{n}{System}\PYG{o}{.}\PYG{n+na}{out}\PYG{o}{.}\PYG{n+na}{println}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}message envoyer = 1,\PYGZdq{}}\PYG{o}{+}\PYG{n}{resultat}\PYG{o}{);}
					\PYG{o}{\PYGZcb{}}\PYG{k}{else}
					\PYG{o}{\PYGZob{}}
						\PYG{c+c1}{//on a pas pu lexecuter on renvoi un message }
					\PYG{o}{\PYGZcb{}}	
        	   \PYG{o}{\PYGZcb{}} 
 	           \PYG{k}{catch}\PYG{o}{(}\PYG{n}{IOException} \PYG{n}{ioe}\PYG{o}{)\PYGZob{}}
        		    \PYG{n}{System}\PYG{o}{.}\PYG{n+na}{out}\PYG{o}{.}\PYG{n+na}{println}\PYG{o}{(}\PYG{l+s}{\PYGZdq{}Erreur IO\PYGZdq{}}\PYG{o}{);}
				\PYG{n}{ioe}\PYG{o}{.}\PYG{n+na}{printStackTrace}\PYG{o}{();}
			\PYG{o}{\PYGZcb{}} \PYG{k}{catch} \PYG{o}{(}\PYG{n}{InterruptedException} \PYG{n}{e}\PYG{o}{)} \PYG{o}{\PYGZob{}}
				\PYG{c+c1}{// TODO Auto\PYGZhy{}generated catch block}
				\PYG{n}{e}\PYG{o}{.}\PYG{n+na}{printStackTrace}\PYG{o}{();}
			\PYG{o}{\PYGZcb{}} \PYG{k}{catch} \PYG{o}{(}\PYG{n}{ParserConfigurationException} \PYG{n}{e}\PYG{o}{)} \PYG{o}{\PYGZob{}}
				\PYG{c+c1}{// TODO Auto\PYGZhy{}generated catch block}
				\PYG{n}{e}\PYG{o}{.}\PYG{n+na}{printStackTrace}\PYG{o}{();}
			\PYG{o}{\PYGZcb{}} \PYG{k}{catch} \PYG{o}{(}\PYG{n}{SAXException} \PYG{n}{e}\PYG{o}{)} \PYG{o}{\PYGZob{}}
				\PYG{c+c1}{// TODO Auto\PYGZhy{}generated catch block}
				\PYG{n}{e}\PYG{o}{.}\PYG{n+na}{printStackTrace}\PYG{o}{();}
			\PYG{o}{\PYGZcb{}} \PYG{k}{catch} \PYG{o}{(}\PYG{n}{XPathExpressionException} \PYG{n}{e}\PYG{o}{)} \PYG{o}{\PYGZob{}}
				\PYG{c+c1}{// TODO Auto\PYGZhy{}generated catch block}
				\PYG{n}{e}\PYG{o}{.}\PYG{n+na}{printStackTrace}\PYG{o}{();}
			\PYG{o}{\PYGZcb{}} \PYG{k}{catch} \PYG{o}{(}\PYG{n}{XMPPException} \PYG{n}{e}\PYG{o}{)} \PYG{o}{\PYGZob{}}
				\PYG{c+c1}{// TODO Auto\PYGZhy{}generated catch block}
				\PYG{n}{e}\PYG{o}{.}\PYG{n+na}{printStackTrace}\PYG{o}{();}
			\PYG{o}{\PYGZcb{}}
        	\PYG{o}{\PYGZcb{}}
        \PYG{o}{\PYGZcb{}}
        
    \PYG{o}{\PYGZcb{}}
    
    \PYG{k+kd}{public} \PYG{k+kt}{boolean} \PYG{n+nf}{isTravail\PYGZus{}terminer}\PYG{o}{()} \PYG{o}{\PYGZob{}}
		\PYG{k}{return} \PYG{n}{travail\PYGZus{}terminer}\PYG{o}{;}
	\PYG{o}{\PYGZcb{}}

	\PYG{k+kd}{public} \PYG{k+kt}{void} \PYG{n+nf}{setTravail\PYGZus{}terminer}\PYG{o}{(}\PYG{k+kt}{boolean} \PYG{n}{travail\PYGZus{}terminer}\PYG{o}{)} \PYG{o}{\PYGZob{}}
		\PYG{k}{this}\PYG{o}{.}\PYG{n+na}{travail\PYGZus{}terminer} \PYG{o}{=} \PYG{n}{travail\PYGZus{}terminer}\PYG{o}{;}
	\PYG{o}{\PYGZcb{}}

	\PYG{k+kd}{public} \PYG{k+kt}{int} \PYG{n+nf}{getEnvoyer}\PYG{o}{()} \PYG{o}{\PYGZob{}}
		\PYG{k}{return} \PYG{n}{envoyer}\PYG{o}{;}
	\PYG{o}{\PYGZcb{}}

	\PYG{k+kd}{public} \PYG{k+kt}{void} \PYG{n+nf}{setEnvoyer}\PYG{o}{(}\PYG{k+kt}{int} \PYG{n}{envoyer}\PYG{o}{)} \PYG{o}{\PYGZob{}}
		\PYG{k}{this}\PYG{o}{.}\PYG{n+na}{envoyer} \PYG{o}{=} \PYG{n}{envoyer}\PYG{o}{;}
	\PYG{o}{\PYGZcb{}}

	\PYG{k+kd}{public} \PYG{k+kt}{int} \PYG{n+nf}{getRecu}\PYG{o}{()} \PYG{o}{\PYGZob{}}
		\PYG{k}{return} \PYG{n}{recu}\PYG{o}{;}
	\PYG{o}{\PYGZcb{}}

	\PYG{k+kd}{public} \PYG{k+kt}{void} \PYG{n+nf}{setRecu}\PYG{o}{(}\PYG{k+kt}{int} \PYG{n}{recu}\PYG{o}{)} \PYG{o}{\PYGZob{}}
		\PYG{k}{this}\PYG{o}{.}\PYG{n+na}{recu} \PYG{o}{=} \PYG{n}{recu}\PYG{o}{;}
	\PYG{o}{\PYGZcb{}}

	\PYG{k+kd}{public} \PYG{n}{XmppManager} \PYG{n+nf}{getCurrent}\PYG{o}{()} \PYG{o}{\PYGZob{}}
		\PYG{k}{return} \PYG{k}{this}\PYG{o}{;}
	\PYG{o}{\PYGZcb{}}

	\PYG{k+kd}{public} \PYG{n}{String} \PYG{n+nf}{getServer}\PYG{o}{()} \PYG{o}{\PYGZob{}}
		\PYG{k}{return} \PYG{n}{server}\PYG{o}{;}
	\PYG{o}{\PYGZcb{}}

	\PYG{k+kd}{public} \PYG{k+kt}{void} \PYG{n+nf}{setServer}\PYG{o}{(}\PYG{n}{String} \PYG{n}{server}\PYG{o}{)} \PYG{o}{\PYGZob{}}
		\PYG{k}{this}\PYG{o}{.}\PYG{n+na}{server} \PYG{o}{=} \PYG{n}{server}\PYG{o}{;}
	\PYG{o}{\PYGZcb{}}

	\PYG{k+kd}{public} \PYG{k+kt}{int} \PYG{n+nf}{getPort}\PYG{o}{()} \PYG{o}{\PYGZob{}}
		\PYG{k}{return} \PYG{n}{port}\PYG{o}{;}
	\PYG{o}{\PYGZcb{}}

	\PYG{k+kd}{public} \PYG{k+kt}{void} \PYG{n+nf}{setPort}\PYG{o}{(}\PYG{k+kt}{int} \PYG{n}{port}\PYG{o}{)} \PYG{o}{\PYGZob{}}
		\PYG{k}{this}\PYG{o}{.}\PYG{n+na}{port} \PYG{o}{=} \PYG{n}{port}\PYG{o}{;}
	\PYG{o}{\PYGZcb{}}

	\PYG{k+kd}{public} \PYG{n}{ConnectionConfiguration} \PYG{n+nf}{getConfig}\PYG{o}{()} \PYG{o}{\PYGZob{}}
		\PYG{k}{return} \PYG{n}{config}\PYG{o}{;}
	\PYG{o}{\PYGZcb{}}

	\PYG{k+kd}{public} \PYG{k+kt}{void} \PYG{n+nf}{setConfig}\PYG{o}{(}\PYG{n}{ConnectionConfiguration} \PYG{n}{config}\PYG{o}{)} \PYG{o}{\PYGZob{}}
		\PYG{k}{this}\PYG{o}{.}\PYG{n+na}{config} \PYG{o}{=} \PYG{n}{config}\PYG{o}{;}
	\PYG{o}{\PYGZcb{}}

	\PYG{k+kd}{public} \PYG{n}{ChatManager} \PYG{n+nf}{getChatManager}\PYG{o}{()} \PYG{o}{\PYGZob{}}
		\PYG{k}{return} \PYG{n}{chatManager}\PYG{o}{;}
	\PYG{o}{\PYGZcb{}}

	\PYG{k+kd}{public} \PYG{k+kt}{void} \PYG{n+nf}{setChatManager}\PYG{o}{(}\PYG{n}{ChatManager} \PYG{n}{chatManager}\PYG{o}{)} \PYG{o}{\PYGZob{}}
		\PYG{k}{this}\PYG{o}{.}\PYG{n+na}{chatManager} \PYG{o}{=} \PYG{n}{chatManager}\PYG{o}{;}
	\PYG{o}{\PYGZcb{}}

	\PYG{k+kd}{public} \PYG{n}{MessageListener} \PYG{n+nf}{getMessageListener}\PYG{o}{()} \PYG{o}{\PYGZob{}}
		\PYG{k}{return} \PYG{n}{messageListener}\PYG{o}{;}
	\PYG{o}{\PYGZcb{}}

	\PYG{k+kd}{public} \PYG{k+kt}{void} \PYG{n+nf}{setMessageListener}\PYG{o}{(}\PYG{n}{MessageListener} \PYG{n}{messageListener}\PYG{o}{)} \PYG{o}{\PYGZob{}}
		\PYG{k}{this}\PYG{o}{.}\PYG{n+na}{messageListener} \PYG{o}{=} \PYG{n}{messageListener}\PYG{o}{;}
	\PYG{o}{\PYGZcb{}}

	\PYG{k+kd}{public} \PYG{k+kt}{int} \PYG{n+nf}{getRetour\PYGZus{}Providing}\PYG{o}{()} \PYG{o}{\PYGZob{}}
		\PYG{k}{return} \PYG{n}{retour\PYGZus{}Providing}\PYG{o}{;}
	\PYG{o}{\PYGZcb{}}

	\PYG{k+kd}{public} \PYG{k+kt}{void} \PYG{n+nf}{setRetour\PYGZus{}Providing}\PYG{o}{(}\PYG{k+kt}{int} \PYG{n}{retour\PYGZus{}Providing}\PYG{o}{)} \PYG{o}{\PYGZob{}}
		\PYG{k}{this}\PYG{o}{.}\PYG{n+na}{retour\PYGZus{}Providing} \PYG{o}{=} \PYG{n}{retour\PYGZus{}Providing}\PYG{o}{;}
	\PYG{o}{\PYGZcb{}}

	\PYG{k+kd}{public} \PYG{k+kd}{static} \PYG{k+kt}{int} \PYG{n+nf}{getPacketreplytimeout}\PYG{o}{()} \PYG{o}{\PYGZob{}}
		\PYG{k}{return} \PYG{n}{packetReplyTimeout}\PYG{o}{;}
	\PYG{o}{\PYGZcb{}}
    
\PYG{o}{\PYGZcb{}}
\end{Verbatim}
